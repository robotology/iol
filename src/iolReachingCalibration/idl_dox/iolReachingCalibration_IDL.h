/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_IOLREACHINGCALIBRATION_IDL_H
#define YARP_THRIFT_GENERATOR_SERVICE_IOLREACHINGCALIBRATION_IDL_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <src/CalibMatrixReq.h>
#include <src/CalibPointReq.h>

/**
 * iolReachingCalibration_IDL
 * IDL Interface to \ref IOL Reaching Calibration services.
 */
class iolReachingCalibration_IDL :
        public yarp::os::Wire
{
public:
    // Constructor
    iolReachingCalibration_IDL();

    /**
     * Initiate the calibration.
     * @param hand can be "left" or "right".
     * @param object selects the object.
     * @param entry forces to specify the entry
     *              name in the calibration map.
     * @return true/false on success/failure.
     */
    virtual bool calibration_start(const std::string& hand, const std::string& object, const std::string& entry = "");

    /**
     * Finish the calibration.
     * @return true/false on success/failure.
     */
    virtual bool calibration_stop();

    /**
     * Clear calibration
     * @param hand can be "left" or "right".
     * @param object selects the object.
     * @param entry forces to specify the entry
     *              name in the calibration map.
     * @return true/false on success/failure.
     */
    virtual bool calibration_clear(const std::string& hand, const std::string& object, const std::string& entry = "");

    /**
     * List available calibrations.
     * @return the list of available calibrations.
     */
    virtual std::vector<std::string> calibration_list();

    /**
     * Retrieve the calibrated object location.\n
     * The robot will bring the object in foveation
     * before computing the calibration.
     * @param hand can be "left" or "right".
     * @param object selects the object.
     * @param entry forces to specify the entry
     *              name in the calibration map.
     * @return the requested point in \ref CalibPointReq format.
     */
    virtual CalibPointReq get_location(const std::string& hand, const std::string& object, const std::string& entry = "");

    /**
     * Retrieve the calibrated object location.\n
     * No foveation is performed before computing the
     * calibrated values.
     * @param entry selects the entry in the table.
     * @param x the input point x-coordinate.
     * @param y the input point y-coordinate.
     * @param z the input point z-coordinate.
     * @param invert if true invert the input/output map.
     * @return the requested point in \ref CalibPointReq format.
     */
    virtual CalibPointReq get_location_nolook(const std::string& entry, const double x, const double y, const double z, const bool invert = 0);

    /**
     * Retrieve the calibration matrix.
     * @param entry selects the entry in the table.
     * @return the requested calibration matrix in \ref CalibMatrixReq format.
     */
    virtual CalibMatrixReq get_matrix(const std::string& entry);

    /**
     * Add an input-ouput pair to the location map.
     * @param entry selects the entry in the table.
     * @param xi the input point x-coordinate.
     * @param yi the input point y-coordinate.
     * @param zi the input point z-coordinate.
     * @param xo the output point x-coordinate.
     * @param yo the output point y-coordinate.
     * @param zo the output point z-coordinate.
     * @return true/false on success/failure.
     */
    virtual bool add_pair(const std::string& entry, const double xi, const double yi, const double zi, const double xo, const double yo, const double zo);

    /**
     * Save calibration on file.
     * @return true/false on success/failure.
     */
    virtual bool save();

    /**
     * Load calibration from file.
     * @return true/false on success/failure.
     */
    virtual bool load();

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

#endif // YARP_THRIFT_GENERATOR_SERVICE_IOLREACHINGCALIBRATION_IDL_H
